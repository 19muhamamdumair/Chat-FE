{"version":3,"file":"static/js/289.1dbf4191.chunk.js","mappings":"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","sources":["components/hook-form/FormProvider.js","components/hook-form/RHFTextField.js","sections/auth/LoginForm.js","pages/auth/Login.js"],"sourcesContent":["import React from 'react';\nimport { FormProvider as Form } from 'react-hook-form';\n\nconst FormProvider = ({children, onSubmit, methods}) => {\n  return (\n    <Form  {...methods}>\n        <form onSubmit={onSubmit}>\n            {children}\n        </form>\n    </Form>\n  )\n}\n\nexport default FormProvider","import PropTypes from \"prop-types\";\n//form\nimport { useFormContext,Controller } from \"react-hook-form\";\n// @mui\nimport { TextField } from \"@mui/material\";\n\nRHFTextField.propTypes = {\n    name: PropTypes.string,\n    label: PropTypes.string,\n    helperText: PropTypes.node\n}\n\nexport default function RHFTextField({name, helperText, ...other}){\n\n    const {control} = useFormContext();\n    return (\n       <Controller name={name} control={control} render={({field,fieldState:{error}})=>(\n        <TextField {...field} \n        // fullWidth\n        sx={{width:'50%'}}\n         value={typeof field.value === 'number' && field.value === 0 ? '' : field.value}\n         error={!!error} helperText={error ? error.message : helperText}\n        {...other}/>\n       )}/>\n    )\n}\n","import React, { useState } from 'react';\nimport * as Yup from 'yup';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { Alert, Button, IconButton, InputAdornment, Stack } from '@mui/material';\nimport { Eye, EyeSlash } from 'phosphor-react';\nimport { useNavigate } from 'react-router-dom';\nimport FormProvider from '../../components/hook-form/FormProvider';\nimport { RHFTextField } from '../../components/hook-form/index';\nimport { useAuth } from '../../routes/AuthContext'; // Make sure this path matches your project structure\n\nconst LoginForm = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const { login } = useAuth();\n  const navigate = useNavigate();\n\n  // Validation rules\n  const loginSchema = Yup.object().shape({\n    username: Yup.string().required('Username is required'),\n    password: Yup.string().required('Password is required')\n  });\n\n  const defaultValues = {\n    username: '',\n    password: ''\n  };\n\n  const methods = useForm({\n    resolver: yupResolver(loginSchema),\n    defaultValues\n  });\n\n  const { reset, setError, handleSubmit, formState: { errors, isSubmitting, isSubmitSuccessful } } = methods;\n\n  const onSubmit = async (data) => {\n    try {\n      const userInfo = await login(data); // Pass the login data (credentials) to the login function\n\n      if (userInfo && userInfo.id) {\n        navigate('/'); // Redirect to the default path after login\n      } else {\n        throw new Error('Login failed');\n      }\n    } catch (error) {\n      console.log(error);\n      reset();\n      setError('afterSubmit', {\n        ...error,\n        message: error.message\n      });\n    }\n  };\n\n  return (\n    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\n      <Stack spacing={3}>\n        {!!errors.afterSubmit && <Alert severity='error'>{errors.afterSubmit.message}</Alert>}\n\n        <RHFTextField fullWidth name='username' label='Username' />\n        <RHFTextField\n          name='password'\n          label='Password'\n          type={showPassword ? 'text' : 'password'}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position='end'>\n                <IconButton onClick={() => setShowPassword(!showPassword)}>\n                  {showPassword ? <Eye /> : <EyeSlash />}\n                </IconButton>\n              </InputAdornment>\n            )\n          }}\n        />\n      </Stack>\n      <Stack alignItems={'flex-end'} sx={{ my: 2 }}>\n        {/* <Link component={RouterLink} to='/auth/reset-password'\n          variant='body2' color='inherit' underline='always'>Forgot Password?</Link> */}\n      </Stack>\n      <Button\n        color='inherit'\n        size='large'\n        type='submit'\n        variant='contained'\n        sx={{\n          width: '50%',\n          bgcolor: 'text.primary',\n          color: (theme) => theme.palette.mode === 'light' ? 'common.white' : 'grey.800',\n          '&:hover': {\n            bgcolor: 'text.primary',\n            color: (theme) => theme.palette.mode === 'light' ? 'common.white' : 'grey.800',\n          }\n        }}\n      >\n        Login\n      </Button>\n    </FormProvider>\n  );\n};\n\nexport default LoginForm;\n","import { Link, Stack, Typography } from '@mui/material'\nimport React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport AuthSocial from '../../sections/auth/AuthSocial';\nimport LoginForm from '../../sections/auth/LoginForm';\n\nconst Login = () => {\n  return (\n    <>\n    <Stack spacing={2} sx={{margin:'50px', display:'flex'}}>\n      <Typography variant='h4'>\n        Login to Chat\n      </Typography>\n      {/* <Stack direction='row' spacing={0.5}>\n        <Typography variant='body2'>New User?</Typography>\n        <Link to='/auth/register' component={RouterLink} variant='subtitle2'>Create an account</Link>\n      </Stack> */}\n      {/* Login form */}\n      <LoginForm/>\n      {/* Auth Social */}\n      {/* <AuthSocial/> */}\n    </Stack>\n    </>\n  )\n}\n\nexport default Login"],"names":["_ref","children","onSubmit","methods","_jsx","Form","RHFTextField","name","helperText","other","control","useFormContext","Controller","render","_ref2","field","fieldState","error","TextField","sx","width","value","message","LoginForm","showPassword","setShowPassword","useState","login","useAuth","navigate","useNavigate","loginSchema","Yup","shape","username","required","password","useForm","resolver","yupResolver","defaultValues","reset","setError","handleSubmit","formState","errors","isSubmitting","isSubmitSuccessful","_jsxs","FormProvider","async","userInfo","data","id","Error","console","log","Stack","spacing","afterSubmit","Alert","severity","fullWidth","label","type","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","Eye","EyeSlash","alignItems","my","Button","color","size","variant","bgcolor","theme","palette","mode","Login","_Fragment","margin","display","Typography"],"sourceRoot":""}